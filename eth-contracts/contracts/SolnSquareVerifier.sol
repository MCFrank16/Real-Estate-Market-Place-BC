// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

import "./verifier.sol"; // generated by the zokrates
import "./ERC721Mintable.sol";

// TODO define a contract call to the zokrates generated solidity contract <Verifier> or <renamedVerifier>

contract SquareVerifier is Verifier {}

// TODO define another contract named SolnSquareVerifier that inherits from your ERC721Mintable class
contract SolnSquareVerifier is CustomERC721Token {
    // TODO define a solutions struct that can hold an index & an address
    struct solutions {
        uint256 index;
        address addressSol;
        uint256 solutionProvided;
    }

    // TODO define an array of the above struct
    solutions[] solutionsArray;

    // verifier squareVerifier
    SquareVerifier public squareVerifier;

    // TODO define a mapping to store unique solutions submitted
    mapping(bytes32 => solutions) uniqueSolutions;

    // TODO Create an event to emit when a solution is added
    event solutionAdded(address from, uint256 index);


    constructor(address verifierAddress){
        squareVerifier = SquareVerifier(verifierAddress);
    }

    // TODO Create a function to add the solutions to the array and emit the event
    function addSolution(
        uint256 index1,
        address address1,
        uint256[2] memory A,
        uint256[2][2] memory B,
        uint256[2] memory C,
        uint256[2] memory INPUT
    ) public {
        solutions memory solution1 = solutions({
            index: index1,
            addressSol: address1,
            solutionProvided: 1
        });

        bytes32 uniqueKey = keccak256(abi.encodePacked(A,B,C, INPUT));
        uniqueSolutions[uniqueKey] = solution1;
        solutionsArray.push(solution1);
        emit solutionAdded(address1, index1);
    }

    function getSolutionCount() public view returns (uint256) {
        return solutionsArray.length;
    }

    // TODO Create a function to mint new NFT only after the solution has been verified
    //  - make sure the solution is unique (has not been used before)
    //  - make sure you handle metadata as well as tokenSuplly
    function mintToken(
        uint256[2] memory A,
        uint256[2][2] memory B,
        uint256[2] memory C,
        uint256[2] memory INPUT,
        uint256 ID
    ) public returns (bool) {
        bytes32 uniquenessCheck = keccak256(abi.encodePacked(A, B, C, INPUT));
        require(uniqueSolutions[uniquenessCheck].solutionProvided == 0, "Solution was used");
        require(squareVerifier.verifyTx(A, B, C, INPUT), "Incorrect solution");

        addSolution(ID, msg.sender, A, B, C, INPUT);
        bool check = mint(msg.sender, ID);
        return check;
    }
}
